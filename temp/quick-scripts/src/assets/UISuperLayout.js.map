{"version":3,"sources":["assets/UISuperLayout.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAAoD;AACpD,6CAAwC;AAClC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAC5C,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,yDAAc,CAAA;IACd,qDAAY,CAAA;AAChB,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB;AAED;IAA2C,iCAAY;IAAvD;QAAA,qEA2MC;QAvMM,eAAS,GAAgB,WAAW,CAAC,QAAQ,CAAA;QAG7C,gBAAU,GAAW,CAAC,CAAA;QAGtB,mBAAa,GAAW,CAAC,CAAA;QAGzB,iBAAW,GAAW,CAAC,CAAA;QAGvB,kBAAY,GAAW,CAAC,CAAA;QAGxB,aAAO,GAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAA;QAG/B,oBAAc,GAAW,EAAE,CAAA;QAI3B,YAAM,GAAc,IAAI,CAAA;QAEjB,qBAAe,GAAY,IAAI,CAAA;QAGtC,sBAAgB,GAAY,KAAK,CAAA;QAEC,uBAAiB,GAAgC,EAAE,CAAA;QAEjF,kBAAY,GAAW,CAAC,CAAA;QAEvB,iBAAW,GAAsB,IAAI,CAAA;;IAsKjD,CAAC;IArKG,sBAAW,qCAAU;aAArB;YACI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,2BAAiB,CAAC,CAAA;aAC7E;YACD,OAAO,IAAI,CAAC,WAAW,CAAA;QAC3B,CAAC;;;OAAA;IAED,sBAAW,iCAAM;aAAjB;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;QAChC,CAAC;;;OAAA;IAED,sBAAW,iCAAM;aAAjB;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAA;QAC1D,CAAC;;;OAAA;IACD,KAAK;IACE,sCAAc,GAArB;QACI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,CAAA;QAC9E,IAAI,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAA;QACvB,IAAI,OAAO,EAAE,OAAO,CAAA;QACpB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,wEAAwE;YACxE,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;YACpI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;SACvI;aAAM;YACH,2DAA2D;YAC3D,8BAA8B;YAC9B,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;YACtH,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAA;SACzH;QACD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAA;QACzE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAA;QAC1E,OAAO,IAAI,CAAA;IACf,CAAC;IAED,8BAAM,GAAN;QACI,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC7D,CAAC;IACM,yCAAiB,GAAxB,UAAyB,KAAa;QAClC,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IACD,iBAAiB;IACV,6BAAK,GAAZ,UAAa,KAAa;QACtB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAA;QACzB,IAAI,CAAC,cAAc,EAAE,CAAA;QACrB,IAAI,MAAM,GAAG,CAAC,CAAA;QACd,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE;YAC9D,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAA;SACxD;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpC,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,MAAM,CAAA;YACnC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAA;YACtB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;SAC1C;QACD,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAA;QACnC,OAAO,IAAI,CAAA;IACf,CAAC;IACD,YAAY;IACL,sCAAc,GAArB,UAAsB,YAAqB,EAAE,UAAoB;QAC7D,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,CAAC,QAAQ,EAAE;YACxC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;SAC7C;aAAM;YACH,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;SAC9C;IACL,CAAC;IACD,YAAY;IACL,sCAAc,GAArB,UAAsB,YAAqB,EAAE,UAAoB;QAC7D,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,CAAC,QAAQ,EAAE;YACxC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;SAChD;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;SAC/C;IACL,CAAC;IACM,uCAAe,GAAtB;QACI,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,IAAI,CAAA;IACxC,CAAC;IACO,mCAAW,GAAnB,UAAoB,YAAqB,EAAE,UAAoB;QAC3D,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,CAAC,QAAQ;YAAE,OAAM;QAClD,IAAI,CAAC,YAAY,EAAE,CAAA;QACnB,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;QACxC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;IACzD,CAAC;IACO,sCAAc,GAAtB,UAAuB,YAAqB,EAAE,UAAoB;QAAlE,iBASC;QARG,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,CAAC,QAAQ;YAAE,OAAM;QAClD,IAAI,CAAC,UAAU,EAAE,CAAA;QACjB,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACvC;;;WAGG;QACH,IAAI,CAAC,YAAY,CAAC,cAAM,OAAA,KAAI,CAAC,UAAU,CAAC,cAAc,CAAC,YAAY,EAAE,UAAU,CAAC,EAAxD,CAAwD,CAAC,CAAA;IACrF,CAAC;IACO,oCAAY,GAApB,UAAqB,YAAqB,EAAE,UAAoB;QAC5D,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,CAAC,UAAU;YAAE,OAAM;QACpD,IAAI,CAAC,YAAY,EAAE,CAAA;QACnB,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACvC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;IAC1D,CAAC;IACO,qCAAa,GAArB,UAAsB,YAAqB,EAAE,UAAoB;QAAjE,iBASC;QARG,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,CAAC,UAAU;YAAE,OAAM;QACpD,IAAI,CAAC,UAAU,EAAE,CAAA;QACjB,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACxC;;;WAGG;QACH,IAAI,CAAC,YAAY,CAAC,cAAM,OAAA,KAAI,CAAC,UAAU,CAAC,aAAa,CAAC,YAAY,EAAE,UAAU,CAAC,EAAvD,CAAuD,CAAC,CAAA;IACpF,CAAC;IACO,oCAAY,GAApB;QACI,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAA;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;YAClB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;SAC7B;IACL,CAAC;IACO,kCAAU,GAAlB;QACI,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAA;QAChC,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAA;QAC7B,OAAO;QACP,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YACnD,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;YACjC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAA;YACxB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;SACjC;IACL,CAAC;IACO,sCAAc,GAAtB;QACI,SAAS;QACT,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAA;QACnC,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,EAAE;YAC5C,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc;gBAAE,MAAK;YACnC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;gBACxB,IAAI,OAAK,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;gBACvC,OAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;gBAClB,IAAI,MAAM,GAAG,OAAK,CAAC,YAAY,CAAC,qBAAW,CAAC,CAAA;gBAC5C,6BAA6B;gBAC7B,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;gBACzH,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAK,CAAC,CAAA;aAC5B;SACJ;QACD,SAAS;QACT,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,EAAE;YAC7C,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAA;YACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;gBACvB,KAAK,CAAC,OAAO,EAAE,CAAA;gBACf,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;aAC/B;SACJ;IACL,CAAC;IACO,mCAAW,GAAnB,UAAoB,MAAe,EAAE,KAAa;QAC9C,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;IAC/E,CAAC;IACO,0CAAkB,GAA1B,UAA2B,IAAa;QACpC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QAChE,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACnE,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;QAC1E,OAAO,MAAM,CAAA;IACjB,CAAC;IACO,6CAAqB,GAA7B,UAA8B,IAAa;QACvC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACjE,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QAClE,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;QAC1E,OAAO,MAAM,CAAA;IACjB,CAAC;IAtME;QAHF,QAAQ,CAAC;YACN,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC;YAC1B,WAAW,EAAE,MAAM;SACtB,CAAC;oDAA8C;IAG7C;QAFF,QAAQ,CAAC;YACN,WAAW,EAAE,KAAK;SACrB,CAAC;qDAAuB;IAGtB;QAFF,QAAQ,CAAC;YACN,WAAW,EAAE,KAAK;SACrB,CAAC;wDAA0B;IAGzB;QAFF,QAAQ,CAAC;YACN,WAAW,EAAE,KAAK;SACrB,CAAC;sDAAwB;IAGvB;QAFF,QAAQ,CAAC;YACN,WAAW,EAAE,KAAK;SACrB,CAAC;uDAAyB;IAGxB;QAFF,QAAQ,CAAC;YACN,WAAW,EAAE,IAAI;SACpB,CAAC;kDAAgC;IAG/B;QAFF,QAAQ,CAAC;YACN,WAAW,EAAE,WAAW;SAC3B,CAAC;yDAA4B;IAI3B;QAHF,QAAQ,CAAC;YACN,IAAI,EAAE,EAAE,CAAC,MAAM;YACf,WAAW,EAAE,aAAa;SAC7B,CAAC;iDAAyB;IAEjB;QAAT,QAAQ;0DAAgC;IAGtC;QAFF,QAAQ,CAAC;YACN,WAAW,EAAE,cAAc;SAC9B,CAAC;2DAAkC;IAEC;QAApC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC;4DAAoD;IAjCvE,aAAa;QADjC,OAAO;OACa,aAAa,CA2MjC;IAAD,oBAAC;CA3MD,AA2MC,CA3M0C,EAAE,CAAC,SAAS,GA2MtD;kBA3MoB,aAAa","file":"","sourceRoot":"/","sourcesContent":["import UISpuerScrollView from './UISuperScrollView';\nimport UISpuerItem from './UISuperItem';\nconst { ccclass, property } = cc._decorator;\nexport enum UISuperAxis {\n    HORIZONTAL = 0,\n    VERTICAL = 1\n}\n@ccclass\nexport default class UISuperLayout extends cc.Component {\n    @property({\n        type: cc.Enum(UISuperAxis),\n        displayName: \"排列方向\"\n    }) startAxis: UISuperAxis = UISuperAxis.VERTICAL\n    @property({\n        displayName: \"上边距\"\n    }) paddingTop: number = 0\n    @property({\n        displayName: \"下边距\"\n    }) paddingBottom: number = 0\n    @property({\n        displayName: \"左边距\"\n    }) paddingLeft: number = 0\n    @property({\n        displayName: \"右边距\"\n    }) paddingRight: number = 0\n    @property({\n        displayName: \"间隔\"\n    }) spacing: cc.Vec2 = cc.Vec2.ZERO\n    @property({\n        displayName: \"可复用的Item数\"\n    }) maxPrefabTotal: number = 20\n    @property({\n        type: cc.Prefab,\n        displayName: \"item Prefab\"\n    }) prefab: cc.Prefab = null\n\n    @property affectedByScale: boolean = true\n    @property({\n        displayName: \"使用item子节点包围盒\"\n    }) childBoundingBox: boolean = false\n\n    @property(cc.Component.EventHandler) refreshItemEvents: cc.Component.EventHandler[] = []\n\n    public maxItemTotal: number = 0\n\n    private _scrollView: UISpuerScrollView = null\n    public get scrollView(): UISpuerScrollView {\n        if (!this._scrollView) {\n            this._scrollView = this.node.parent.parent.getComponent(UISpuerScrollView)\n        }\n        return this._scrollView\n    }\n\n    public get header(): cc.Node {\n        return this.node.children[0]\n    }\n\n    public get footer(): cc.Node {\n        return this.node.children[this.node.childrenCount - 1]\n    }\n    // 重写\n    public getContentSize() {\n        if (!this.header || !this.footer) return this.scrollView.view.getContentSize()\n        let size = cc.Size.ZERO\n        let _header, _footer\n        if (this.childBoundingBox) {\n            // 该边框包含自身和已激活的子节点的世界边框 (注意！使用此方法时 底层代码会遍历所有子节点 并包含所有子节点的世界边框 子节点越多性能越差)\n            _header = this.node.convertToWorldSpaceAR(cc.v2(this.header.getBoundingBoxToWorld().xMin, this.header.getBoundingBoxToWorld().yMax))\n            _footer = this.node.convertToWorldSpaceAR(cc.v2(this.footer.getBoundingBoxToWorld().xMax, this.footer.getBoundingBoxToWorld().yMin))\n        } else {\n            // 该边框包含自身的世界边框 (这里主要是修改getBoundingBoxToWorld代码 去掉遍历子节点的代码)\n            // 这里只需要计算item本身的世界边框即可 (性能最优)\n            _header = this.node.convertToWorldSpaceAR(cc.v2(this.header['getBounding']().xMin, this.header['getBounding']().yMax))\n            _footer = this.node.convertToWorldSpaceAR(cc.v2(this.footer['getBounding']().xMax, this.footer['getBounding']().yMin))\n        }\n        size.width = _footer.x - _header.x + this.paddingLeft + this.paddingRight\n        size.height = _header.y - _footer.y + this.paddingTop + this.paddingBottom\n        return size\n    }\n\n    onLoad() {\n        this.node.getContentSize = this.getContentSize.bind(this)\n    }\n    public getUsedScaleValue(value: number) {\n        return this.affectedByScale ? Math.abs(value) : 1;\n    }\n    /** 设置最大item数量 */\n    public total(value: number): this {\n        this.maxItemTotal = value\n        this.moreRemLessAdd()\n        let offset = 0\n        if (this.footer && this.footer['index'] + 1 >= this.maxItemTotal) {\n            offset = this.footer['index'] + 1 - this.maxItemTotal\n        }\n        for (let i = 0; i < this.node.children.length; i++) {\n            const child = this.node.children[i];\n            let index = child['index'] - offset\n            child['index'] = index\n            this.refreshItem(child, child['index'])\n        }\n        this.scrollView.calculateBoundary()\n        return this\n    }\n    /** 滚动到头部 */\n    public scrollToHeader(timeInSecond?: number, attenuated?: boolean) {\n        if (this.startAxis == UISuperAxis.VERTICAL) {\n            this.scrollToTop(timeInSecond, attenuated)\n        } else {\n            this.scrollToLeft(timeInSecond, attenuated)\n        }\n    }\n    /** 滚动到尾部 */\n    public scrollToFooter(timeInSecond?: number, attenuated?: boolean) {\n        if (this.startAxis == UISuperAxis.VERTICAL) {\n            this.scrollToBottom(timeInSecond, attenuated)\n        } else {\n            this.scrollToRight(timeInSecond, attenuated)\n        }\n    }\n    public resetScrollView() {\n        this.scrollView.autoScrolling = true\n    }\n    private scrollToTop(timeInSecond?: number, attenuated?: boolean) {\n        if (this.startAxis != UISuperAxis.VERTICAL) return\n        this.refreshStart()\n        this.scrollView.deltaMove = cc.v2(0, -1)\n        this.scrollView.scrollToTop(timeInSecond, attenuated)\n    }\n    private scrollToBottom(timeInSecond?: number, attenuated?: boolean) {\n        if (this.startAxis != UISuperAxis.VERTICAL) return\n        this.refreshEnd()\n        this.scrollView.deltaMove = cc.v2(0, 1)\n        /**\n         * item尺寸不一致时 item会在当前帧重置位置 然后在下一帧滚动计算 (这里具体延迟多少帧不确定，因为也许item更新尺寸是异步的，这里不去考虑)\n         * 默认只是认为当前帧会更新完所有item尺寸\n         */\n        this.scheduleOnce(() => this.scrollView.scrollToBottom(timeInSecond, attenuated))\n    }\n    private scrollToLeft(timeInSecond?: number, attenuated?: boolean) {\n        if (this.startAxis != UISuperAxis.HORIZONTAL) return\n        this.refreshStart()\n        this.scrollView.deltaMove = cc.v2(1, 0)\n        this.scrollView.scrollToLeft(timeInSecond, attenuated)\n    }\n    private scrollToRight(timeInSecond?: number, attenuated?: boolean) {\n        if (this.startAxis != UISuperAxis.HORIZONTAL) return\n        this.refreshEnd()\n        this.scrollView.deltaMove = cc.v2(-1, 0)\n        /**\n         * item尺寸不一致时 item会在当前帧重置位置 然后在下一帧滚动计算 (这里具体延迟多少帧不确定，因为也许item更新尺寸是异步的，这里不去考虑)\n         * 默认只是认为当前帧会更新完所有item尺寸\n         */\n        this.scheduleOnce(() => this.scrollView.scrollToRight(timeInSecond, attenuated))\n    }\n    private refreshStart() {\n        this.scrollView.stopAutoScroll()\n        for (let i = 0; i < this.node.children.length; i++) {\n            const child = this.node.children[i];\n            child['index'] = i\n            this.refreshItem(child, i)\n        }\n    }\n    private refreshEnd() {\n        this.scrollView.stopAutoScroll()\n        let index = this.maxItemTotal\n        // 上监听下\n        for (let i = this.node.childrenCount - 1; i >= 0; i--) {\n            var child = this.node.children[i]\n            child['index'] = --index\n            this.refreshItem(child, index)\n        }\n    }\n    private moreRemLessAdd() {\n        // 不够的情况下\n        let index = this.node.childrenCount\n        for (let i = index; i < this.maxItemTotal; i++) {\n            if (i >= this.maxPrefabTotal) break\n            if (!this.node.children[i]) {\n                let child = cc.instantiate(this.prefab)\n                child['index'] = i\n                let script = child.addComponent(UISpuerItem)\n                // 将这三个方法以回调的方式传递过去 (对外不公开调用)\n                script.init(this, this.refreshItem.bind(this), this.isOutOfBoundaryTop.bind(this), this.isOutOfBoundaryBottom.bind(this))\n                this.node.addChild(child)\n            }\n        }\n        // 多余的情况下\n        if (this.node.childrenCount > this.maxItemTotal) {\n            var total = this.node.childrenCount - this.maxItemTotal\n            for (let i = 0; i < total; i++) {\n                var child = this.footer\n                child.destroy()\n                this.node.removeChild(child)\n            }\n        }\n    }\n    private refreshItem(target: cc.Node, index: number) {\n        cc.Component.EventHandler.emitEvents(this.refreshItemEvents, target, index)\n    }\n    private isOutOfBoundaryTop(node: cc.Node) {\n        let width = node.width * this.getUsedScaleValue(node.scaleX) * 2\n        let height = -node.height * this.getUsedScaleValue(node.scaleY) * 2\n        let offset = this.scrollView.getHowMuchOutOfBoundary(cc.v2(width, height))\n        return offset\n    }\n    private isOutOfBoundaryBottom(node: cc.Node) {\n        let width = -node.width * this.getUsedScaleValue(node.scaleX) * 2\n        let height = node.height * this.getUsedScaleValue(node.scaleY) * 2\n        let offset = this.scrollView.getHowMuchOutOfBoundary(cc.v2(width, height))\n        return offset\n    }\n}\n"]}